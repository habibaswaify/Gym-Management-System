/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.frontend;
import com.mycompany.backend.general.Utils;
import com.mycompany.backend.trainer.TrainerRole;
import javax.swing.JOptionPane;

/**
 *
 * @author habib
 */
public class CancelRegistration extends javax.swing.JFrame {
    TrainerRole trainerRole;
    Utils utilValidations ;

    /**
     * Creates new form CancelRegistration
     * @param trainerRole
     */
    public CancelRegistration(TrainerRole trainerRole) {
        this.trainerRole = trainerRole;
        this.utilValidations = new Utils();
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cancel Registration");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        memberIDTextField = new javax.swing.JTextField();
        classIDTextField = new javax.swing.JTextField();
        cancelRegistration = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Member ID");

        jLabel2.setText("Class ID");

        cancelRegistration.setText("Cancel Registration");
        cancelRegistration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelRegistrationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(classIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memberIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(cancelRegistration)))
                .addContainerGap(117, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(memberIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(85, 85, 85)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(classIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(cancelRegistration)
                .addContainerGap(72, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelRegistrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelRegistrationActionPerformed
        // TODO add your handling code here:
        boolean validInput = true;
                String memberID = memberIDTextField.getText();
                String classID = classIDTextField.getText();
                String key = memberID + "-" + classID;
                // Check if memberID exists
                if (memberID.equalsIgnoreCase("")) {
                    JOptionPane.showMessageDialog(CancelRegistration.this,
                            "Error: member ID field is empty.",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                    validInput = false;
                } else if (!utilValidations.recordExists(trainerRole.getListOfMembers(), memberID)) {
                    JOptionPane.showMessageDialog(CancelRegistration.this,
                            "Error: Member with ID " + memberID + " does not exist.",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                    validInput = false;

                }
                // Check if class ID exists
                else if (classID.equalsIgnoreCase("")) {
                    JOptionPane.showMessageDialog(CancelRegistration.this,
                            "Error: class ID field is empty.",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                    validInput = false;
                } else if (!utilValidations.recordExists(trainerRole.getListOfClasses(), classID)) {
                    JOptionPane.showMessageDialog(CancelRegistration.this,
                            "Error: Class with ID " + classID + " does not exist.",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                    validInput = false;

                }
                // Check if registration is a duplicate
                else if (!utilValidations.recordExists(trainerRole.getListOfRegistrations(), key)) {
                    JOptionPane.showMessageDialog(CancelRegistration.this,
                            "Error: Registration ID " + key + " does not exist.",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                    validInput = false;
                }
                if(validInput){
                    JOptionPane.showMessageDialog(CancelRegistration.this,
                            "Member with ID "+memberID+" has been unregistered from class "+classID+".",
                            "Success",
                            JOptionPane.INFORMATION_MESSAGE);
                    trainerRole.cancelRegistration(memberID,classID);
                    dispose();
                }
    }//GEN-LAST:event_cancelRegistrationActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelRegistration;
    private javax.swing.JTextField classIDTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField memberIDTextField;
    // End of variables declaration//GEN-END:variables
}
