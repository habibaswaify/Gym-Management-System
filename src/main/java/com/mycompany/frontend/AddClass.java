/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.frontend;
import com.mycompany.backend.general.Utils;
import com.mycompany.backend.system.AdminRole;
import com.mycompany.backend.trainer.TrainerRole;

import javax.swing.*;



/**
 *
 * @author habib
 */
public class AddClass extends javax.swing.JFrame {
    private final TrainerRole trainerRole;
    private final AdminRole adminRole;
    private final Utils utilValidations;
    public AddClass(TrainerRole trainerRole, AdminRole adminRole) {
        this.trainerRole = trainerRole;
        this.adminRole = adminRole;
        this.utilValidations = new Utils();
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add Class");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        IDTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        trainerTextField = new javax.swing.JTextField();
        durationTextField = new javax.swing.JTextField();
        participantsTextField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("ClassID");

        jLabel2.setText("Class Name");

        jLabel3.setText("Trainer ID");

        jLabel4.setText("Duration");

        jLabel5.setText("Max Participants");

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(participantsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(durationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addGap(43, 43, 43)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(IDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(trainerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(addButton)))
                .addContainerGap(183, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(IDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(trainerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(durationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(participantsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(addButton)
                .addContainerGap(93, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        boolean validInput = true;
        boolean emptyDuration = true;
                String name = nameTextField.getText();
                String classID = IDTextField.getText();
                String trainerID = trainerTextField.getText();
                String duration = durationTextField.getText();
                String participants = participantsTextField.getText();
                int durationInt = 0;
                int participantsInt = 0;
                // Validate ID
                if (classID.equalsIgnoreCase("")) {
                    JOptionPane.showMessageDialog(AddClass.this,
                            "Error: ID field is empty.",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                    validInput = false;
                } else if (!utilValidations.validateClassID(classID)) {
                    JOptionPane.showMessageDialog(AddClass.this,
                            "Error: invalid ID.",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                    validInput = false;
                } else if (utilValidations.recordExists(trainerRole.getListOfClasses(), classID)) {
                    JOptionPane.showMessageDialog(AddClass.this,
                            "Error: Class with ID " + classID + " already exists",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                    validInput = false;

                }
                // Validate name
                else if (name.equalsIgnoreCase("")) {
                    JOptionPane.showMessageDialog(AddClass.this,
                            "Error: class name field is empty.",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                    validInput = false;
                } else if (!utilValidations.validateName(name)) {
                    JOptionPane.showMessageDialog(AddClass.this,
                            "Error: invalid class name.",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                    validInput = false;
                }
                // Validate trainer ID
                else if (trainerID.equalsIgnoreCase("")) {
                    JOptionPane.showMessageDialog(AddClass.this,
                            "Error: trainer ID field is empty.",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                    validInput = false;
                } else if (!utilValidations.recordExists(adminRole.getListOfTrainers(), trainerID)) {
                    JOptionPane.showMessageDialog(AddClass.this,
                            "Error: Trainer with ID " + trainerID + " does not exist",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                    validInput = false;

                }
                // Validate duration
                
                else if (duration.equalsIgnoreCase("")) {
                    JOptionPane.showMessageDialog(AddClass.this,
                            "Error: duration field is empty.",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                    validInput = false;
                } else {
                    emptyDuration = false;
                    try {
                        durationInt = Integer.parseInt(duration);
                        if (durationInt < 60) {
                            JOptionPane.showMessageDialog(AddClass.this,
                                    "Error: duration should be at least 60 minutes.",
                                    "Input Error",
                                    JOptionPane.ERROR_MESSAGE);
                            validInput = false;

                        }
                    } catch (NumberFormatException exception) {
                        JOptionPane.showMessageDialog(AddClass.this,
                                "Error: invalid duration format. Duration should be an integer.",
                                "Input Error",
                                JOptionPane.ERROR_MESSAGE);
                        validInput = false;

                    }

                }
                // Validate maximum participants
                if (participants.equalsIgnoreCase("")) {
                    if(!emptyDuration){
                        JOptionPane.showMessageDialog(AddClass.this,
                            "Error: max participants field is empty.",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                    }
                    
                    validInput = false;
                } else {
                    try {
                        participantsInt = Integer.parseInt(participants);
                        if (participantsInt < 1) {
                            JOptionPane.showMessageDialog(AddClass.this,
                                    "Error: maximum number of participants should be a positive number.",
                                    "Input Error",
                                    JOptionPane.ERROR_MESSAGE);
                            validInput = false;

                        }
                    } catch (NumberFormatException exception) {
                        JOptionPane.showMessageDialog(AddClass.this,
                                "Error: invalid max participants format. Number of participants should be an integer.",
                                "Input Error",
                                JOptionPane.ERROR_MESSAGE);
                        validInput = false;

                    }

                }


                if (validInput) {
                    JOptionPane.showMessageDialog(AddClass.this,
                            "Class with ID  " + classID + " was added successfully!",
                            "Success",
                            JOptionPane.INFORMATION_MESSAGE);
                    trainerRole.addClass(classID, utilValidations.capitalize(name), trainerID, durationInt, participantsInt);
                    dispose();

                }
    }                                         

    /**
     * @param args the command line arguments
     */
 

    // Variables declaration - do not modify                     
    private javax.swing.JTextField IDTextField;
    private javax.swing.JButton addButton;
    private javax.swing.JTextField durationTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JTextField participantsTextField;
    private javax.swing.JTextField trainerTextField;
    // End of variables declaration                   
}
