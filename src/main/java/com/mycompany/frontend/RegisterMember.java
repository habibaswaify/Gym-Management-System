/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.frontend;

import com.mycompany.backend.general.Utils;
import com.mycompany.backend.trainer.TrainerRole;
import com.mycompany.backend.trainer.Class;
import java.time.LocalDate;
import java.util.Calendar;
import javax.swing.JOptionPane;

/**
 *
 * @author habib
 */
public class RegisterMember extends javax.swing.JFrame {
    TrainerRole trainerRole;
    Utils utilValidations ;

    /**
     * Creates new form RegisterMember
     * @param trainerRole
     */
    public RegisterMember(TrainerRole trainerRole) {
        initComponents();
        setTitle("Register Member");
        this.trainerRole = trainerRole;
        this.utilValidations = new Utils();
        populateDateComboBox();
       dateComboBox.getItemAt(0);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        memberIDTextField = new javax.swing.JTextField();
        classIDTextField = new javax.swing.JTextField();
        dateComboBox = new javax.swing.JComboBox<>();
        registerButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Member ID");

        jLabel2.setText("Class ID");

        jLabel3.setText("Registration Date");

        registerButton.setText("Register");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memberIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(254, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(registerButton)
                .addGap(195, 195, 195))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(memberIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addComponent(jLabel2))
                    .addComponent(classIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(dateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addComponent(registerButton)
                .addContainerGap(156, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        // TODO add your handling code here:
        boolean validInput = true;
                String memberID = memberIDTextField.getText();
                String classID = classIDTextField.getText();
                String key = memberID + "-" + classID;
                LocalDate date = (LocalDate) dateComboBox.getSelectedItem();
                // Check if memberID exists
                if (memberID.equalsIgnoreCase("")) {
                    JOptionPane.showMessageDialog(RegisterMember.this,
                            "Error: member ID field is empty.",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                    validInput = false;
                } else if (!utilValidations.recordExists(trainerRole.getListOfMembers(), memberID)) {
                    JOptionPane.showMessageDialog(RegisterMember.this,
                            "Error: Member with ID " + memberID + " does not exist.",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                    validInput = false;

                }
                // Check if class ID exists
                else if (classID.equalsIgnoreCase("")) {
                    JOptionPane.showMessageDialog(RegisterMember.this,
                            "Error: class ID field is empty.",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                    validInput = false;
                } else if (!utilValidations.recordExists(trainerRole.getListOfClasses(), classID)) {
                    JOptionPane.showMessageDialog(RegisterMember.this,
                            "Error: Class with ID " + classID + " does not exist.",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                    validInput = false;

                }
                // Check if registration is a duplicate
                else if (utilValidations.recordExists(trainerRole.getListOfRegistrations(), key)) {
                    JOptionPane.showMessageDialog(RegisterMember.this,
                            "Error: Registration ID " + key + " already exists.",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                    validInput = false;
                }
                else if(!classHasSeats(classID,trainerRole)){
                   validInput = false;
                    JOptionPane.showMessageDialog(RegisterMember.this,
                            "Error: Class " + classID + " has no available seats.",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                }
                if(validInput){
                    JOptionPane.showMessageDialog(RegisterMember.this,
                            "Registration " + key + " was added successfully!",
                            "Success",
                            JOptionPane.INFORMATION_MESSAGE);
                    trainerRole.registerMemberForClass(memberID,classID,date);
                    dispose();
                }
    }//GEN-LAST:event_registerButtonActionPerformed

    private void populateDateComboBox(){
        Calendar calendar = Calendar.getInstance();

        for (int i = 0; i < 60; i++) {
            calendar.add(Calendar.DAY_OF_MONTH, 1);
            LocalDate date = LocalDate.now().plusDays(i);
 
            dateComboBox.addItem(date);
        }

    }
    private boolean classHasSeats(String key, TrainerRole trainerRole){
        for(Class classRecord: trainerRole.getListOfClasses()){
            if(classRecord.getSearchKey().equalsIgnoreCase(key)){
                return classRecord.getAvailableSeats() !=0;
            }
        }
        return false;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField classIDTextField;
    private javax.swing.JComboBox<LocalDate> dateComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField memberIDTextField;
    private javax.swing.JButton registerButton;
    // End of variables declaration//GEN-END:variables
}
